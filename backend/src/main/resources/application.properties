spring.aop.auto=false
logging.level.root=INFO
## MySQL
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
#`hibernate_sequence' doesn't exist
spring.jpa.hibernate.use-new-id-generator-mappings=false
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
# drop n create table, good for testing, comment this in production
#spring.jpa.hibernate.ddl-auto=update

management.endpoints.enabled-by-default=true
management.endpoints.web.exposure.include=*

spring.rabbitmq.host=${RABBITMQ_HOST}
spring.rabbitmq.port=${RABBITMQ_PORT}
spring.rabbitmq.username=${RABBITMQ_USERNAME}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}
rabbitmq.exchange.name=petka.exchange
rabbitmq.queue.name=petka.queue
rabbitmq.routing.key=petka.routing.key
# RPC rabbit exchange,queue and routing key
rabbitmq.rpc.exchange.name=petka.rpc.exchange
rabbitmq.rpc.queue.name=petka.rpc.queue
rabbitmq.rpc.routing.key=petka.rpc.routing.key

spring.cache.type=redis
spring.cache.redis.time-to-live=600000
spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}

security.oauth2.resource.filter-order=3
security.signing-key=MaYzkSjmkzPC57L
security.encoding-strength=256
security.security-realm=Spring Boot JWT Example Realm
